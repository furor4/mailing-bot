from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, InlineKeyboardButton, Message, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import delete
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload

from db.models import Mailings, Buttons
from handlers.creating_mailings import PERIODICITY_REGEX, GLOBAL_PERIODICITY_REGEX
from handlers.start import get_mailings_with_buttons

router = Router()


class MailingEditing(StatesGroup):
    waiting_for_text = State()
    waiting_for_media = State()
    waiting_for_per = State()
    waiting_for_globalper = State()
    waiting_for_buttons = State()
    waiting_for_delete_confirmation = State()


def kb_edits(mailing):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_text_{mailing.id}"),
        InlineKeyboardButton(text="üíæ –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞", callback_data=f"edit_media_{mailing.id}")
    )
    builder.row(
        InlineKeyboardButton(text="üïí –ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å", callback_data=f"edit_per_{mailing.id}"),
        InlineKeyboardButton(text="üóìÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–ª–æ–±. –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å", callback_data=f"edit_globalper_{mailing.id}")
    )
    builder.row(
        InlineKeyboardButton(text="üéõÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫–∏", callback_data=f"edit_buttons_{mailing.id}")
    )
    builder.row(
        InlineKeyboardButton(text='üü¢ –†–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞!' if mailing.status else 'üî¥ –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞.',
                             callback_data=f"toggle_status_{mailing.id}")
    )
    builder.row(
        InlineKeyboardButton(text="‚ùå –£–î–ê–õ–ò–¢–¨ –†–ê–°–°–´–õ–ö–£", callback_data=f"delete_mailing_{mailing.id}")
    )
    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_mailings")
    )

    return builder


async def kb_back(mailing_id: int):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_{mailing_id}"))

    return builder


@router.callback_query(F.data.startswith('mailing_'))
async def mailing_editing_handler(cq: CallbackQuery, session: AsyncSession, state: FSMContext):
    mailing_id = int(cq.data.split("_")[1])

    mailing = await session.get(Mailings, mailing_id, options=[selectinload(Mailings.buttons)])

    if not mailing:
        return

    await cq.message.delete()

    reply_markup = None
    if mailing.buttons:
        kb = InlineKeyboardBuilder()
        for btn in mailing.buttons:
            kb.add(InlineKeyboardButton(text=btn.text, url=btn.url))
        kb.adjust(1)
        reply_markup = kb.as_markup()

    try:
        if mailing.media:
            if mailing.media.startswith('AgAC'):
                await cq.message.answer_photo(
                    str(mailing.media),
                    caption=str(mailing.text),
                    parse_mode=ParseMode.HTML,
                    reply_markup=reply_markup
                )
            elif mailing.media.startswith('BAAC'):
                await cq.message.answer_video(
                    str(mailing.media),
                    caption=str(mailing.text),
                    parse_mode=ParseMode.HTML,
                    reply_markup=reply_markup
                )
            elif mailing.media.startswith('CgAC'):
                await cq.message.answer_animation(
                    str(mailing.media),
                    caption=str(mailing.text),
                    parse_mode=ParseMode.HTML,
                    reply_markup=reply_markup
                )
            else:
                await cq.message.answer(
                    str(mailing.text),
                    parse_mode=ParseMode.HTML,
                    reply_markup=reply_markup
                )
        else:
            await cq.message.answer(
                str(mailing.text),
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await cq.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏",
            parse_mode=ParseMode.HTML
        )

    builder = kb_edits(mailing)

    await cq.message.answer(
        "üìù <b>–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )

    await state.update_data(
        mailing_id=mailing.id,
    )
    await cq.answer()


@router.callback_query(F.data.startswith("edit_text_"))
async def edit_text_handler(cq: CallbackQuery, state: FSMContext):
    mailing_id = int(cq.data.split("_")[2])
    await state.set_state(MailingEditing.waiting_for_text)
    await state.update_data(mailing_id=mailing_id)

    builder = await kb_back(mailing_id)

    await cq.message.edit_text(
        text="üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )

    await cq.answer()


@router.message(MailingEditing.waiting_for_text)
async def process_new_text(message: Message, session: AsyncSession, state: FSMContext):
    data = await state.get_data()
    mailing_id = data.get('mailing_id')

    mailing = await session.get(Mailings, mailing_id)
    mailing.text = message.html_text
    await session.commit()

    await message.answer(
        text="‚úÖ <b>–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>",
        parse_mode=ParseMode.HTML
    )

    await state.clear()


@router.callback_query(F.data.startswith("edit_media_"))
async def edit_media_handler(cq: CallbackQuery, state: FSMContext):
    mailing_id = int(cq.data.split("_")[2])
    await state.set_state(MailingEditing.waiting_for_media)
    await state.update_data(mailing_id=mailing_id)

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚ùå –£–±—Ä–∞—Ç—å –º–µ–¥–∏–∞", callback_data=f"remove_media_{mailing_id}"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_{mailing_id}"))
    builder.adjust(1)

    await cq.message.edit_text(
        text="üíæ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ GIF:</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )

    await cq.answer()


@router.callback_query(F.data.startswith("remove_media_"))
async def remove_media_handler(cq: CallbackQuery, session: AsyncSession, state: FSMContext):
    mailing_id = int(cq.data.split("_")[2])

    mailing = await session.get(Mailings, mailing_id)
    mailing.media = None
    await session.commit()

    await cq.message.edit_text(
        "‚úÖ <b>–ú–µ–¥–∏–∞ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏!</b>",
        parse_mode=ParseMode.HTML
    )

    await state.clear()
    await cq.answer()


@router.message(MailingEditing.waiting_for_media, F.photo | F.video | F.animation)
async def process_new_media(message: Message, session: AsyncSession, state: FSMContext):
    data = await state.get_data()
    mailing_id = data.get('mailing_id')

    if message.photo:
        media_id = message.photo[-1].file_id
    elif message.video:
        media_id = message.video.file_id
    elif message.animation:
        media_id = message.animation.file_id
    else:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\nüíæ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ GIF:</b>",
                                    parse_mode=ParseMode.HTML)

    mailing = await session.get(Mailings, mailing_id)
    mailing.media = media_id
    await session.commit()

    await message.answer(
        text="‚úÖ <b>–ú–µ–¥–∏–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>",
        parse_mode=ParseMode.HTML
    )

    await state.clear()


@router.callback_query(F.data.startswith("edit_per_"))
async def edit_per_handler(cq: CallbackQuery, state: FSMContext):
    mailing_id = int(cq.data.split("_")[2])
    await state.set_state(MailingEditing.waiting_for_per)
    await state.update_data(mailing_id=mailing_id)

    builder = await kb_back(mailing_id)

    await cq.message.edit_text(
        text="üïí <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏:</b>"
             "\n<blockquote>–ü—Ä–∏–º–µ—Ä—ã: <code>30m, 1h, 2d</code></blockquote>",
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )

    await cq.answer()


@router.message(MailingEditing.waiting_for_per)
async def process_new_per(message: Message, session: AsyncSession, state: FSMContext):
    if not message.text or not PERIODICITY_REGEX.match(message.text.strip()):
        return await message.answer("‚ùå <i>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.</i>"
                                    "\n\nüïí <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏:</b>\n"
                                    "<blockquote>–ü—Ä–∏–º–µ—Ä—ã: <code>30m, 1h, 2d</code></blockquote>",
                                    parse_mode=ParseMode.HTML)

    data = await state.get_data()
    mailing_id = data.get('mailing_id')

    mailing = await session.get(Mailings, mailing_id)
    mailing.per = message.text
    await session.commit()

    await message.answer(
        text="‚úÖ <b>–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>",
        parse_mode=ParseMode.HTML
    )

    await state.clear()


@router.callback_query(F.data.startswith("edit_globalper_"))
async def edit_globalper_handler(cq: CallbackQuery, state: FSMContext):
    mailing_id = int(cq.data.split("_")[2])
    await state.set_state(MailingEditing.waiting_for_globalper)
    await state.update_data(mailing_id=mailing_id)

    builder = await kb_back(mailing_id)

    await cq.message.edit_text(
        text="üóìÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:</b>"
             "\n<blockquote>–ü—Ä–∏–º–µ—Ä—ã: <code>1M, 2w, 3d</code></blockquote>",
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )

    await cq.answer()


@router.message(MailingEditing.waiting_for_globalper)
async def process_new_globalper(message: Message, session: AsyncSession, state: FSMContext):
    if not message.text or not GLOBAL_PERIODICITY_REGEX.match(message.text.strip()):
        return await message.answer("‚ùå <i>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.</i>"
                                    "\n\nüóìÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:</b>\n"
                                    "<blockquote>–ü—Ä–∏–º–µ—Ä—ã: <code>1M, 2w, 3d</code></blockquote>",
                                    parse_mode=ParseMode.HTML)

    data = await state.get_data()
    mailing_id = data.get('mailing_id')

    mailing = await session.get(Mailings, mailing_id)
    mailing.globalper = message.text
    await session.commit()

    await message.answer(
        text="‚úÖ <b>–ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>",
        parse_mode=ParseMode.HTML
    )

    await state.clear()


@router.callback_query(F.data.startswith("edit_buttons_"))
async def edit_buttons_handler(cq: CallbackQuery, state: FSMContext):
    mailing_id = int(cq.data.split("_")[2])
    await state.set_state(MailingEditing.waiting_for_buttons)
    await state.update_data(mailing_id=mailing_id)

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚ùå –£–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏", callback_data=f"remove_buttons_{mailing_id}"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_{mailing_id}"))
    builder.adjust(1)

    await cq.message.edit_text(
        text="\n\nüéõÔ∏è <b>–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n"
             "<blockquote><code>–¢–µ–∫—Å—Ç - https://—Å—Å—ã–ª–∫–∞1.com</code>\n"
             "<code>–¢–µ–∫—Å—Ç2 - https://—Å—Å—ã–ª–∫–∞2.com</code></blockquote>\n\n"
             "üí° <i>–ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏!\n"
             "–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ä—ã–µ —Å–æ—Ç—Ä—É—Ç—Å—è!</i>",
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )

    await cq.answer()


@router.callback_query(F.data.startswith("remove_buttons_"))
async def remove_buttons_handler(cq: CallbackQuery, session: AsyncSession, state: FSMContext):
    mailing_id = int(cq.data.split("_")[2])

    await session.execute(delete(Buttons).where(Buttons.mailing_id == mailing_id))
    await session.commit()

    await cq.message.edit_text(
        "‚úÖ <b>–ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏!</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_{mailing_id}")]
        ])
    )

    await state.clear()
    await cq.answer()


@router.message(MailingEditing.waiting_for_buttons)
async def process_new_buttons(message: Message, session: AsyncSession, state: FSMContext):
    data = await state.get_data()
    mailing_id = data.get('mailing_id')

    await session.execute(delete(Buttons).where(Buttons.mailing_id == mailing_id))

    buttons_data = []
    lines = message.text.split('\n')

    for line in lines:
        if '-' in line:
            text_part, url_part = line.split('-', 1)
            text = text_part.strip()
            url = url_part.strip()

            try:
                buttons_data.append({'text': text, 'url': url})
            except TelegramBadRequest:
                return await message.answer("‚ùå <i>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–æ–∫.</i>"
                                            "\n\nüéõÔ∏è <b>–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n"
                                            "<blockquote><code>–¢–µ–∫—Å—Ç - https://—Å—Å—ã–ª–∫–∞1.com</code>\n"
                                            "<code>–¢–µ–∫—Å—Ç2 - https://—Å—Å—ã–ª–∫–∞2.com</code></blockquote>\n\n"
                                            "üí° <i>–ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏!\n"
                                            "–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ä—ã–µ —Å–æ—Ç—Ä—É—Ç—Å—è!</i>",
                                            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                                [InlineKeyboardButton(text="‚ùå –£–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏",
                                                                      callback_data=f"remove_buttons_{mailing_id}")],
                                                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥",
                                                                      callback_data=f"back_to_{mailing_id}")]
                                            ]), parse_mode=ParseMode.HTML)

    for btn_data in buttons_data:
        button = Buttons(
            mailing_id=mailing_id,
            text=btn_data['text'],
            url=btn_data['url']
        )
        session.add(button)

    await session.commit()

    await message.answer(
        text="‚úÖ <b>–ö–Ω–æ–ø–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>",
        parse_mode=ParseMode.HTML
    )

    await state.clear()


@router.callback_query(F.data.startswith("delete_mailing_"))
async def delete_mailing_handler(cq: CallbackQuery, state: FSMContext):
    mailing_id = int(cq.data.split("_")[2])
    await state.set_state(MailingEditing.waiting_for_delete_confirmation)
    await state.update_data(mailing_id=mailing_id)

    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_delete_{mailing_id}"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_{mailing_id}")
    )
    builder.adjust(1)

    await cq.message.edit_text(
        "‚ùå <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ä–∞—Å—Å—ã–ª–∫—É?</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )

    await cq.answer()


@router.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_handler(cq: CallbackQuery, session: AsyncSession, state: FSMContext):
    mailing_id = int(cq.data.split("_")[2])

    await session.delete(await session.get(Mailings, mailing_id))
    await session.commit()

    await cq.message.edit_text(
        "‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!</b>",
        parse_mode=ParseMode.HTML
    )

    await state.clear()
    await cq.answer()


@router.callback_query(F.data.startswith("toggle_status_"))
async def toggle_mailing_status(cq: CallbackQuery, session: AsyncSession):
    mailing_id = int(cq.data.split("_")[2])
    mailing = await session.get(Mailings, mailing_id)

    mailing.status = not mailing.status
    await session.commit()

    builder = kb_edits(mailing)

    await cq.message.edit_reply_markup(
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data == "back_to_mailings")
async def back_to_mailings_handler(cq: CallbackQuery, session: AsyncSession, state: FSMContext):
    await state.clear()

    builder = await get_mailings_with_buttons(session)

    await cq.message.edit_text(
        "üì¶ <b>–ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫:</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )

    await cq.answer()


@router.callback_query(F.data.startswith("back_to_"))
async def back_to_mailing(cq: CallbackQuery, session: AsyncSession, state: FSMContext):
    mailing_id = int(cq.data.split("_")[2])
    mailing = await session.get(Mailings, mailing_id, options=[selectinload(Mailings.buttons)])

    builder = kb_edits(mailing)

    await cq.message.edit_text(
        "üìù <b>–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )

    await state.update_data(
        mailing_id=mailing.id,
    )
    await cq.answer()
