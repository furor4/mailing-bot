import re
from datetime import datetime

from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload

from config import bot, CHAT_ID, MSK
from db.models import Mailings, Buttons
from misc.utils import send_mailing

router = Router()


PERIODICITY_REGEX = re.compile(r'^(\d+[dhm]\s*)+$')
GLOBAL_PERIODICITY_REGEX = re.compile(r'^(\d+[Mwd]\s*)+$')

class MailingCreation(StatesGroup):
    waiting_for_text = State()
    waiting_for_media = State()
    waiting_for_per = State()
    waiting_for_globalper = State()
    waiting_for_buttons = State()
    confirmation = State()


@router.callback_query(F.data == 'create_mailing')
async def create_mailing(cq: CallbackQuery, state: FSMContext):
    await state.set_state(MailingCreation.waiting_for_text)
    await cq.message.edit_text(
        "<b>üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:</b>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")]
        ]), parse_mode=ParseMode.HTML
    )
    await cq.answer()


@router.message(MailingCreation.waiting_for_text)
async def process_mailing_text(message: Message, state: FSMContext):
    await state.update_data(text=message.html_text)
    await state.set_state(MailingCreation.waiting_for_media)

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚ñ∂Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_media"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation"))
    builder.adjust(1)

    await message.answer(
        "‚úÖ <i>–¢–µ–∫—Å—Ç –ø—Ä–∏–Ω—è—Ç!</i>"
        "\n\nüíæ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ GIF –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–æ–¥–Ω–æ –º–µ–¥–∏–∞):</b>",
        reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML
    )


@router.callback_query(F.data == "skip_media", MailingCreation.waiting_for_media)
async def skip_media(cq: CallbackQuery, state: FSMContext):
    await state.update_data(media=None)
    await state.set_state(MailingCreation.waiting_for_per)
    await cq.message.edit_text(
        "‚ñ∂Ô∏è <i>–ú–µ–¥–∏–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ!</i>"
        "\n\nüïí <b>–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏:</b>\n"
        "<blockquote>–ü—Ä–∏–º–µ—Ä—ã: <code>30m, 1h, 2d</code></blockquote>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")]
        ]), parse_mode=ParseMode.HTML
    )
    await cq.answer()


@router.message(MailingCreation.waiting_for_media, F.photo | F.video | F.animation)
async def process_mailing_media(message: Message, state: FSMContext):
    if message.photo:
        media_id = message.photo[-1].file_id
    elif message.video:
        media_id = message.video.file_id
    elif message.animation:
        media_id = message.animation.file_id
    else:
        return await message.answer('‚ùå <i>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.</i>'
                                    '\n\nüíæ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ GIF –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–æ–¥–Ω–æ –º–µ–¥–∏–∞):</b>',
                                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")]
                                    ]), parse_mode=ParseMode.HTML
                                    )

    await state.update_data(media=media_id)
    await state.set_state(MailingCreation.waiting_for_per)

    await message.answer(
        "‚úÖ <i>–ú–µ–¥–∏–∞ –ø—Ä–∏–Ω—è—Ç–æ!</i>"
        "\n\nüïí <b>–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏:</b>\n"
        "<blockquote>–ü—Ä–∏–º–µ—Ä—ã: <code>30m, 1h, 2d</code></blockquote>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")]
        ]), parse_mode=ParseMode.HTML
    )


@router.message(MailingCreation.waiting_for_per)
async def process_periodicity(message: Message, state: FSMContext):
    if not message.text or not PERIODICITY_REGEX.match(message.text.strip()):
        return await message.answer("‚ùå <i>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.</i>"
                                    "\n\nüïí <b>–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏:</b>\n"
                                    "<blockquote>–ü—Ä–∏–º–µ—Ä—ã: <code>30m, 1h, 2d</code></blockquote>",
                                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")]
                                    ]), parse_mode=ParseMode.HTML)

    await state.update_data(per=message.text)
    await state.set_state(MailingCreation.waiting_for_globalper)

    await message.answer(
        "‚úÖ <i>–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∞!</i>"
        "\n\n<b>üóìÔ∏è –í–≤–µ–¥–∏—Ç–µ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å (–∫–æ–≥–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—Å—è):</b>\n"
        "<blockquote>–ü—Ä–∏–º–µ—Ä—ã: <code>1M, 2w, 3d</code></blockquote>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")]
        ]), parse_mode=ParseMode.HTML
    )


@router.message(MailingCreation.waiting_for_globalper)
async def process_global_periodicity(message: Message, state: FSMContext):
    if not message.text or not GLOBAL_PERIODICITY_REGEX.match(message.text.strip()):
        return await message.answer("‚ùå <i>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.</i>"
                                    "\n\n<b>üóìÔ∏è –í–≤–µ–¥–∏—Ç–µ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å (–∫–æ–≥–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—Å—è):</b>\n"
                                    "<blockquote>–ü—Ä–∏–º–µ—Ä—ã: <code>1M, 2w, 3d</code></blockquote>",
                                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")]
                                    ]), parse_mode=ParseMode.HTML)

    await state.update_data(globalper=message.text)
    await state.set_state(MailingCreation.waiting_for_buttons)

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚ñ∂Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="no_buttons"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation"))
    builder.adjust(1)

    await message.answer(
        "‚úÖ <i>–ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∞!</i>"
        "\n\nüéõÔ∏è <b>–î–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n"
        "<blockquote><code>–¢–µ–∫—Å—Ç - https://—Å—Å—ã–ª–∫–∞1.com</code>\n"
        "<code>–¢–µ–∫—Å—Ç2 - https://—Å—Å—ã–ª–∫–∞2.com</code></blockquote>\n\n"
        "üí° <i>–ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏!</i>",
        reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML
    )


@router.callback_query(F.data == "no_buttons", MailingCreation.waiting_for_buttons)
async def no_buttons(cq: CallbackQuery, state: FSMContext):
    await state.update_data(buttons=[])
    await show_confirmation(cq.message, state)
    await cq.answer()


@router.message(MailingCreation.waiting_for_buttons)
async def process_buttons(message: Message, state: FSMContext):
    buttons_data = []
    lines = message.text.split('\n')

    for line in lines:
        if '-' in line:
            text_part, url_part = line.split('-', 1)
            text = text_part.strip()
            url = url_part.strip()

            try:
                buttons_data.append({'text': text, 'url': url})
            except TelegramBadRequest:
                return await message.answer("‚ùå <i>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–æ–∫.</i>"
                                            "\n\nüéõÔ∏è <b>–î–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n"
                                            "<blockquote><code>–¢–µ–∫—Å—Ç - https://—Å—Å—ã–ª–∫–∞1.com</code>\n"
                                            "<code>–¢–µ–∫—Å—Ç2 - https://—Å—Å—ã–ª–∫–∞2.com</code></blockquote>\n\n"
                                            "üí° <i>–ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏!</i>",
                                            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                                [InlineKeyboardButton(text="‚ñ∂Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="no_buttons")],
                                                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")]
                                            ]), parse_mode=ParseMode.HTML)

    await state.update_data(buttons=buttons_data)
    await show_confirmation(message, state)


async def show_confirmation(message: Message, state: FSMContext):
    data = await state.get_data()

    text = data.get('text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞')
    media = data.get('media')
    buttons = data.get('buttons', [])

    reply_markup = None
    if buttons:
        kb = InlineKeyboardBuilder()
        for btn in buttons:
            kb.add(InlineKeyboardButton(text=btn['text'], url=btn['url']))
        kb.adjust(1)
        reply_markup = kb.as_markup()

    try:
        if media:
            if isinstance(media, str):
                if media.startswith('AgAC'):
                    await message.answer_photo(
                        media,
                        caption=text,
                        parse_mode=ParseMode.HTML,
                        reply_markup=reply_markup
                    )
                elif media.startswith('BAAC'):
                    await message.answer_video(
                        media,
                        caption=text,
                        parse_mode=ParseMode.HTML,
                        reply_markup=reply_markup
                    )
                elif media.startswith('CgAC'):
                    await message.answer_animation(
                        media,
                        caption=text,
                        parse_mode=ParseMode.HTML,
                        reply_markup=reply_markup
                    )
                else:
                    await message.answer(
                        text,
                        parse_mode=ParseMode.HTML,
                        reply_markup=reply_markup
                    )
            else:
                await message.answer(
                    text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=reply_markup
                )
        else:
            await message.answer(
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</b>"
        , parse_mode=ParseMode.HTML)
        return await state.clear()

    confirm_kb = InlineKeyboardBuilder()
    confirm_kb.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_mailing"),
        InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="cancel_creation")
    )
    confirm_kb.adjust(1)

    await message.answer(
        "üì¢ <b>–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏?</b>",
        reply_markup=confirm_kb.as_markup(), parse_mode=ParseMode.HTML
    )

    await state.set_state(MailingCreation.confirmation)


@router.callback_query(F.data == "confirm_mailing", MailingCreation.confirmation)
async def confirm_mailing(cq: CallbackQuery, session: AsyncSession, state: FSMContext):
    data = await state.get_data()

    mailing = Mailings(
        text=data['text'],
        media=data.get('media'),
        per=data['per'],
        globalper=data['globalper'],
        status=True
    )

    session.add(mailing)
    await session.commit()
    await session.refresh(mailing)

    if 'buttons' in data and data['buttons']:
        for btn_data in data['buttons']:
            button = Buttons(
                mailing_id=mailing.id,
                text=btn_data['text'],
                url=btn_data['url']
            )
            session.add(button)
        await session.commit()

    await state.clear()
    await cq.message.edit_text("‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>", parse_mode=ParseMode.HTML)

    try:
        from db.models import async_session as new_async_session
        async with new_async_session() as new_session:
            fresh_mailing = await new_session.get(
                Mailings,
                mailing.id,
                options=[selectinload(Mailings.buttons)]
            )

            message_id = await send_mailing(cq.bot, CHAT_ID, fresh_mailing)

            if message_id:
                fresh_mailing.last_sent = datetime.now(MSK)
                fresh_mailing.last_message_id = message_id
                await new_session.commit()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

    await cq.answer()


@router.callback_query(F.data == "cancel_creation")
async def cancel_creation(cq: CallbackQuery, state: FSMContext):
    await state.clear()
    await cq.message.edit_text("‚ùå <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.</b>", parse_mode=ParseMode.HTML)
    await cq.answer()
